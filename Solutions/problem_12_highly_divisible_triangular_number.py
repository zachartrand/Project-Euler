"""
@author: Zach Chartrand <zachartrand999@gmail.com>

Project Euler Problem 12: https://projecteuler.net/problem=12

Highly divisible triangular number
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
"""

from math import ceil


def triangle_numbers(n):
    """Return the first n triangle numbers."""
    numbers = []
    for i in range(1, n):
        number = (i * (i+1)) // 2
        numbers.append(number)

    return numbers


def get_number_of_factors(number):
    """Finds the number of factors of a given number has."""
    sqrt_n = ceil(number**0.5)
    number_of_factors = 0
    for i in range(1, sqrt_n):
        if number % i == 0:
            number_of_factors += 2

    return number_of_factors


if __name__ == "__main__":
    list_of_triangle_numbers = triangle_numbers(13000)
    for number in list_of_triangle_numbers:
        number_of_factors = get_number_of_factors(number)
        if number_of_factors > 500:
            print(number, list_of_triangle_numbers.index(number))
            break

# Answer: 76576500
